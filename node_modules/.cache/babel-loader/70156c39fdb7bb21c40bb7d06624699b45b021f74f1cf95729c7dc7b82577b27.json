{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      tasks: [],\n      // Array para almacenar las tareas\n      newTaskTitle: '' // Variable para la nueva tarea\n    };\n  },\n  created() {\n    this.fetchTasks(); // Cargar tareas desde la API al crear el componente\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await fetch('https://dummyjson.com/todos'); // URL de la API\n        const data = await response.json();\n        this.tasks = data.todos; // Asegúrate de que la estructura coincida con tu API\n      } catch (error) {\n        console.error('Error al obtener tareas:', error);\n      }\n    },\n    async addTask() {\n      // Implementa la lógica para agregar una nueva tarea\n      const newTask = {\n        title: this.newTaskTitle,\n        completed: false\n      };\n\n      // Aquí debes enviar la tarea a la API (ejemplo):\n      try {\n        const response = await fetch('https://dummyjson.com/todos/add', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newTask)\n        });\n        const data = await response.json();\n        this.tasks.push(data); // Agrega la tarea al array\n        this.newTaskTitle = ''; // Reinicia el campo de entrada\n      } catch (error) {\n        console.error('Error al agregar la tarea:', error);\n      }\n    },\n    toggleCompletion(task) {\n      task.completed = !task.completed; // Cambia el estado de completada\n      // Aquí puedes implementar una llamada a la API para actualizar el estado\n    },\n    deleteTask(id) {\n      this.tasks = this.tasks.filter(task => task.id !== id); // Elimina la tarea del array\n    }\n  }\n};","map":{"version":3,"names":["name","data","tasks","newTaskTitle","created","fetchTasks","methods","response","fetch","json","todos","error","console","addTask","newTask","title","completed","method","headers","body","JSON","stringify","push","toggleCompletion","task","deleteTask","id","filter"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container mt-5\">\r\n      <h1 class=\"text-center mb-4\">Lista de Tareas</h1>\r\n  \r\n      <!-- Formulario para agregar nuevas tareas -->\r\n      <form @submit.prevent=\"addTask\" class=\"mb-4\">\r\n        <div class=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"newTaskTitle\"\r\n            class=\"form-control\"\r\n            placeholder=\"Añadir nueva tarea\"\r\n            required\r\n          />\r\n          <button class=\"btn btn-primary\" type=\"submit\">Añadir</button>\r\n        </div>\r\n      </form>\r\n  \r\n      <div v-if=\"tasks.length === 0\" class=\"alert alert-info\" role=\"alert\">\r\n        No hay tareas disponibles. ¡Agrega algunas!\r\n      </div>\r\n  \r\n      <ul class=\"list-group\">\r\n        <li\r\n          v-for=\"task in tasks\"\r\n          :key=\"task.id\"\r\n          class=\"list-group-item d-flex justify-content-between align-items-center\"\r\n          :class=\"{'list-group-item-success': task.completed}\"\r\n        >\r\n          <span :style=\"{ textDecoration: task.completed ? 'line-through' : 'none' }\">\r\n            {{ task.title }}\r\n          </span>\r\n          <span class=\"badge\" :class=\"{'bg-success': task.completed, 'bg-warning': !task.completed}\">\r\n            {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n          </span>\r\n          <div>\r\n            <button class=\"btn btn-primary btn-sm\" @click=\"toggleCompletion(task)\">\r\n              <i class=\"bi bi-check-circle\"></i>\r\n            </button>\r\n            <button class=\"btn btn-danger btn-sm\" @click=\"deleteTask(task.id)\">\r\n              <i class=\"bi bi-trash\"></i>\r\n            </button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'TaskList',\r\n    data() {\r\n      return {\r\n        tasks: [], // Array para almacenar las tareas\r\n        newTaskTitle: '', // Variable para la nueva tarea\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchTasks(); // Cargar tareas desde la API al crear el componente\r\n    },\r\n    methods: {\r\n      async fetchTasks() {\r\n        try {\r\n          const response = await fetch('https://dummyjson.com/todos'); // URL de la API\r\n          const data = await response.json();\r\n          this.tasks = data.todos; // Asegúrate de que la estructura coincida con tu API\r\n        } catch (error) {\r\n          console.error('Error al obtener tareas:', error);\r\n        }\r\n      },\r\n      async addTask() {\r\n        // Implementa la lógica para agregar una nueva tarea\r\n        const newTask = {\r\n          title: this.newTaskTitle,\r\n          completed: false,\r\n        };\r\n  \r\n        // Aquí debes enviar la tarea a la API (ejemplo):\r\n        try {\r\n          const response = await fetch('https://dummyjson.com/todos/add', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newTask),\r\n          });\r\n          const data = await response.json();\r\n          this.tasks.push(data); // Agrega la tarea al array\r\n          this.newTaskTitle = ''; // Reinicia el campo de entrada\r\n        } catch (error) {\r\n          console.error('Error al agregar la tarea:', error);\r\n        }\r\n      },\r\n      toggleCompletion(task) {\r\n        task.completed = !task.completed; // Cambia el estado de completada\r\n        // Aquí puedes implementar una llamada a la API para actualizar el estado\r\n      },\r\n      deleteTask(id) {\r\n        this.tasks = this.tasks.filter(task => task.id !== id); // Elimina la tarea del array\r\n       \r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Aquí puedes agregar estilos personalizados para el componente. */\r\n  </style>\r\n  "],"mappings":";AAiDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,MAAAD,WAAA;MACA;QACA,MAAAE,QAAA,SAAAC,KAAA;QACA,MAAAP,IAAA,SAAAM,QAAA,CAAAE,IAAA;QACA,KAAAP,KAAA,GAAAD,IAAA,CAAAS,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;MACA;IACA;IACA,MAAAE,QAAA;MACA;MACA,MAAAC,OAAA;QACAC,KAAA,OAAAZ,YAAA;QACAa,SAAA;MACA;;MAEA;MACA;QACA,MAAAT,QAAA,SAAAC,KAAA;UACAS,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAP,OAAA;QACA;QACA,MAAAb,IAAA,SAAAM,QAAA,CAAAE,IAAA;QACA,KAAAP,KAAA,CAAAoB,IAAA,CAAArB,IAAA;QACA,KAAAE,YAAA;MACA,SAAAQ,KAAA;QACAC,OAAA,CAAAD,KAAA,+BAAAA,KAAA;MACA;IACA;IACAY,iBAAAC,IAAA;MACAA,IAAA,CAAAR,SAAA,IAAAQ,IAAA,CAAAR,SAAA;MACA;IACA;IACAS,WAAAC,EAAA;MACA,KAAAxB,KAAA,QAAAA,KAAA,CAAAyB,MAAA,CAAAH,IAAA,IAAAA,IAAA,CAAAE,EAAA,KAAAA,EAAA;IAEA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}